generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum UserRole {
  USER
  ADMIN
  CLINIC
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  clinicProfile ClinicProfile?
  isVerfied     Boolean   @default(false)
  token         Int
  specialityId         String?   @db.ObjectId
  speciality           Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId         String?   @db.ObjectId
  service           Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model Availability {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clinicProfileId         String   @db.ObjectId @unique
  clinicProfile           ClinicProfile @relation(fields: [clinicProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday        String[]
  tuesday       String[]
  wednesday     String[]
  thursday      String[]
  friday        String[]
  saturday      String[]
  sunday        String[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clinic        User[]
  title         String[]
  slug          String @unique
  imageUrl      String
 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 model Speciality {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  clinic        User[]
  title         String[]
  slug          String @unique
 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ClinicProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String 
  phone         String 
  page          String 
  address       String 
  clinicName    String
  trackingNumber String @unique 
  profilePicture String?
  availability   Availability?
  specialization String?
  servicesOffered String[]
  clinicHours    Int? 
  userId         String   @db.ObjectId @unique
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

 
   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
} 
 
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  demoLink    String?
  description String?
  products    Product[]
 
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
 
model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String   @unique
  price         Float?
  qty           Int?
  imageUrl      String?
  productImages String[]
  features String[]
  description   String?
  categoryId    String   @db.ObjectId
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}